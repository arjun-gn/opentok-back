import RestfulModel, { SaveCallback } from './restful-model';
import EventParticipant, { EventParticipantProperties } from './event-participant';
import EventConferencing, { EventConferencingProperties } from './event-conferencing';
import When, { WhenProperties } from './when';
import NylasConnection from '../nylas-connection';
import EventNotification, { EventNotificationProperties } from './event-notification';
export declare type EventProperties = {
    calendarId: string;
    when: WhenProperties;
    iCalUID?: string;
    messageId?: string;
    title?: string;
    description?: string;
    owner?: string;
    participants?: EventParticipantProperties[];
    readOnly?: boolean;
    location?: string;
    busy?: boolean;
    status?: string;
    recurrence?: {
        rrule: string[];
        timezone: string;
    };
    masterEventId?: string;
    originalStartTime?: number;
    conferencing?: EventConferencingProperties;
    notifications?: EventNotificationProperties[];
    metadata?: object;
    jobStatusId?: string;
};
export default class Event extends RestfulModel {
    calendarId: string;
    when: When;
    iCalUID?: string;
    messageId?: string;
    title?: string;
    description?: string;
    owner?: string;
    participants?: EventParticipant[];
    readOnly?: boolean;
    location?: string;
    busy?: boolean;
    status?: string;
    recurrence?: {
        rrule: string[];
        timezone: string;
    };
    masterEventId?: string;
    originalStartTime?: number;
    conferencing?: EventConferencing;
    notifications?: EventNotification[];
    metadata?: object;
    jobStatusId?: string;
    constructor(connection: NylasConnection, props?: EventProperties);
    get start(): string | number | undefined;
    set start(val: string | number | undefined);
    get end(): string | number | undefined;
    set end(val: string | number | undefined);
    deleteRequestQueryString(params?: Record<string, unknown>): Record<string, unknown>;
    save(params?: {} | SaveCallback, callback?: SaveCallback): Promise<this>;
    saveRequestBody(): Record<string, unknown>;
    rsvp(status: string, comment: string, callback?: (error: Error | null, data?: Event) => void): Promise<Event>;
}
