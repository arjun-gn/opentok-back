"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var calendar_1 = __importDefault(require("./calendar"));
var restful_model_collection_1 = __importDefault(require("./restful-model-collection"));
var free_busy_1 = __importDefault(require("./free-busy"));
var calendar_availability_1 = __importStar(require("./calendar-availability"));
var CalendarRestfulModelCollection = /** @class */ (function (_super) {
    __extends(CalendarRestfulModelCollection, _super);
    function CalendarRestfulModelCollection(connection) {
        var _this = _super.call(this, calendar_1.default, connection) || this;
        _this.connection = connection;
        _this.modelClass = calendar_1.default;
        return _this;
    }
    CalendarRestfulModelCollection.prototype.freeBusy = function (options, callback) {
        return this.connection
            .request({
            method: 'POST',
            path: "/calendars/free-busy",
            body: {
                start_time: options.startTime.toString(),
                end_time: options.endTime.toString(),
                emails: options.emails,
            },
        })
            .then(function (json) {
            if (callback) {
                callback(null, json);
            }
            var freeBusy = [];
            for (var _i = 0, _a = JSON.parse(json); _i < _a.length; _i++) {
                var fb = _a[_i];
                freeBusy.push(new free_busy_1.default().fromJSON(fb));
            }
            return Promise.resolve(freeBusy);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    CalendarRestfulModelCollection.prototype.availability = function (options, callback) {
        // Instantiate objects from properties to get JSON formatted for the API call
        var freeBusyJson = options.freeBusy
            ? options.freeBusy.map(function (fb) { return new free_busy_1.default(fb).toJSON(true); })
            : [];
        var openHoursJson = options.openHours
            ? options.openHours.map(function (oh) { return new calendar_availability_1.OpenHours(oh).toJSON(true); })
            : [];
        return this.connection
            .request({
            method: 'POST',
            path: "/calendars/availability",
            body: {
                emails: options.emails,
                duration_minutes: options.duration,
                interval_minutes: options.interval,
                start_time: options.startTime,
                end_time: options.endTime,
                buffer: options.buffer,
                tentative_busy: options.tentativeBusy,
                round_robin: options.roundRobin,
                free_busy: freeBusyJson,
                open_hours: openHoursJson,
            },
        })
            .then(function (json) {
            if (callback) {
                callback(null, json);
            }
            return Promise.resolve(new calendar_availability_1.default().fromJSON(json));
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    CalendarRestfulModelCollection.prototype.consecutiveAvailability = function (options, callback) {
        // If open hours contains any emails not present in the main emails key
        // or in the free busy email list as this would raise an error on the API side
        var freeBusyEmails = options.freeBusy
            ? options.freeBusy.map(function (fb) { return fb.email; })
            : [];
        if (options.openHours) {
            for (var _i = 0, _a = options.openHours; _i < _a.length; _i++) {
                var openHour = _a[_i];
                var _loop_1 = function (email) {
                    if (!options.emails.some(function (row) { return row.includes(email); }) &&
                        !freeBusyEmails.includes(email)) {
                        throw new Error('Open Hours cannot contain an email not present in the main email list or the free busy email list.');
                    }
                };
                for (var _b = 0, _c = openHour.emails; _b < _c.length; _b++) {
                    var email = _c[_b];
                    _loop_1(email);
                }
            }
        }
        // Instantiate objects from properties to get JSON formatted for the API call
        var freeBusyJson = options.freeBusy
            ? options.freeBusy.map(function (fb) { return new free_busy_1.default(fb).toJSON(true); })
            : [];
        var openHoursJson = options.openHours
            ? options.openHours.map(function (oh) { return new calendar_availability_1.OpenHours(oh).toJSON(true); })
            : [];
        return this.connection
            .request({
            method: 'POST',
            path: "/calendars/availability/consecutive",
            body: {
                emails: options.emails,
                duration_minutes: options.duration,
                interval_minutes: options.interval,
                start_time: options.startTime,
                end_time: options.endTime,
                buffer: options.buffer,
                tentative_busy: options.tentativeBusy,
                free_busy: freeBusyJson,
                open_hours: openHoursJson,
            },
        })
            .then(function (json) {
            if (callback) {
                callback(null, json);
            }
            return Promise.resolve(new calendar_availability_1.CalendarConsecutiveAvailability().fromJSON(json));
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    return CalendarRestfulModelCollection;
}(restful_model_collection_1.default));
exports.default = CalendarRestfulModelCollection;
